;
; File generated by cc65 v 2.19 - Git f8cdb2a
;
	.fopt		compiler,"cc65 v 2.19 - Git f8cdb2a"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_pal_spr
	.import		_pal_col
	.import		_pal_bright
	.import		_ppu_wait_frame
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_ppu_on_bg
	.import		_oam_clear
	.import		_oam_meta_spr
	.import		_famitone_init
	.import		_sfx_init
	.import		_music_play
	.import		_music_stop
	.import		_music_pause
	.import		_sfx_play
	.import		_famitone_update
	.import		_pad_trigger
	.import		_pad_state
	.import		_scroll
	.import		_bank_spr
	.import		_bank_bg
	.import		_rand8
	.import		_set_vram_update
	.import		_vram_adr
	.import		_vram_put
	.import		_vram_fill
	.import		_vram_read
	.import		_vram_write
	.import		_vram_unrle
	.import		_delay
	.import		_nmi_set_callback
	.import		_memcpy
	.export		_title_nam
	.export		_level_nam
	.export		_gameover_nam
	.export		_welldone_nam
	.export		_level1_nam
	.export		_level2_nam
	.export		_level3_nam
	.export		_level4_nam
	.export		_level5_nam
	.export		_palGame1
	.export		_palGame2
	.export		_palGame3
	.export		_palGame4
	.export		_palGame5
	.export		_palGameSpr
	.export		_palTitle
	.export		_sprPlayer
	.export		_sprEnemy1
	.export		_sprEnemy2
	.export		_sprEnemy3
	.export		_sprListPlayer
	.export		_levelList
	.export		_updateListData
	.export		_statsStr
	.export		_screenList
	.export		_screenMusicList
	.export		_largeNums
	.export		_pal_fade_to
	.export		_title_screen
	.export		_show_screen
	.export		_player_move
	.export		_put_num
	.export		_game_loop
	.export		_setup_graphics
	.import		_sound_data
	.import		_music_data
	.export		_setup_sound
	.export		_main

.segment	"DATA"

_screenList:
	.addr	_level_nam
	.addr	_gameover_nam
	.addr	_welldone_nam
.segment	"ZEROPAGE"

.segment	"RODATA"

_title_nam:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$85
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$00
	.byte	$42
	.byte	$43
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$00
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$00
	.byte	$42
	.byte	$43
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$00
	.byte	$42
	.byte	$43
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$00
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$00
	.byte	$42
	.byte	$43
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$42
	.byte	$43
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$00
	.byte	$42
	.byte	$43
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$00
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$00
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$01
	.byte	$AA
	.byte	$30
	.byte	$32
	.byte	$25
	.byte	$33
	.byte	$33
	.byte	$00
	.byte	$00
	.byte	$33
	.byte	$34
	.byte	$21
	.byte	$32
	.byte	$34
	.byte	$00
	.byte	$01
	.byte	$93
	.byte	$30
	.byte	$24
	.byte	$12
	.byte	$10
	.byte	$11
	.byte	$12
	.byte	$00
	.byte	$33
	.byte	$28
	.byte	$29
	.byte	$32
	.byte	$35
	.byte	$00
	.byte	$01
	.byte	$8A
	.byte	$55
	.byte	$01
	.byte	$08
	.byte	$99
	.byte	$AA
	.byte	$FF
	.byte	$BB
	.byte	$AA
	.byte	$55
	.byte	$01
	.byte	$02
	.byte	$99
	.byte	$AA
	.byte	$FF
	.byte	$BB
	.byte	$AA
	.byte	$55
	.byte	$01
	.byte	$02
	.byte	$99
	.byte	$AA
	.byte	$FF
	.byte	$BB
	.byte	$AA
	.byte	$55
	.byte	$55
	.byte	$00
	.byte	$01
	.byte	$0F
	.byte	$AA
	.byte	$01
	.byte	$07
	.byte	$0A
	.byte	$01
	.byte	$07
	.byte	$01
	.byte	$00
_level_nam:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$89
	.byte	$67
	.byte	$00
	.byte	$65
	.byte	$66
	.byte	$67
	.byte	$68
	.byte	$65
	.byte	$66
	.byte	$67
	.byte	$00
	.byte	$01
	.byte	$16
	.byte	$67
	.byte	$00
	.byte	$65
	.byte	$6D
	.byte	$67
	.byte	$68
	.byte	$65
	.byte	$6D
	.byte	$67
	.byte	$00
	.byte	$01
	.byte	$16
	.byte	$72
	.byte	$78
	.byte	$72
	.byte	$73
	.byte	$75
	.byte	$76
	.byte	$72
	.byte	$73
	.byte	$72
	.byte	$78
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$2E
	.byte	$01
	.byte	$00
_gameover_nam:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$86
	.byte	$60
	.byte	$61
	.byte	$60
	.byte	$62
	.byte	$63
	.byte	$64
	.byte	$65
	.byte	$66
	.byte	$00
	.byte	$60
	.byte	$62
	.byte	$67
	.byte	$68
	.byte	$65
	.byte	$66
	.byte	$65
	.byte	$62
	.byte	$00
	.byte	$97
	.byte	$00
	.byte	$01
	.byte	$0C
	.byte	$67
	.byte	$6A
	.byte	$67
	.byte	$68
	.byte	$6B
	.byte	$6C
	.byte	$65
	.byte	$6D
	.byte	$00
	.byte	$67
	.byte	$68
	.byte	$67
	.byte	$68
	.byte	$65
	.byte	$6D
	.byte	$67
	.byte	$6E
	.byte	$00
	.byte	$98
	.byte	$00
	.byte	$01
	.byte	$0C
	.byte	$6F
	.byte	$70
	.byte	$65
	.byte	$71
	.byte	$67
	.byte	$68
	.byte	$72
	.byte	$73
	.byte	$00
	.byte	$6F
	.byte	$74
	.byte	$75
	.byte	$76
	.byte	$72
	.byte	$73
	.byte	$65
	.byte	$77
	.byte	$00
	.byte	$99
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$28
	.byte	$01
	.byte	$00
_welldone_nam:
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$FE
	.byte	$00
	.byte	$02
	.byte	$86
	.byte	$67
	.byte	$68
	.byte	$65
	.byte	$66
	.byte	$67
	.byte	$00
	.byte	$67
	.byte	$00
	.byte	$00
	.byte	$65
	.byte	$62
	.byte	$60
	.byte	$62
	.byte	$63
	.byte	$79
	.byte	$65
	.byte	$66
	.byte	$00
	.byte	$97
	.byte	$00
	.byte	$02
	.byte	$0C
	.byte	$82
	.byte	$83
	.byte	$65
	.byte	$6D
	.byte	$67
	.byte	$00
	.byte	$67
	.byte	$00
	.byte	$00
	.byte	$67
	.byte	$68
	.byte	$67
	.byte	$68
	.byte	$84
	.byte	$85
	.byte	$65
	.byte	$6D
	.byte	$00
	.byte	$98
	.byte	$00
	.byte	$02
	.byte	$0C
	.byte	$8E
	.byte	$8F
	.byte	$72
	.byte	$73
	.byte	$72
	.byte	$78
	.byte	$72
	.byte	$78
	.byte	$00
	.byte	$72
	.byte	$74
	.byte	$6F
	.byte	$74
	.byte	$67
	.byte	$68
	.byte	$72
	.byte	$73
	.byte	$00
	.byte	$99
	.byte	$00
	.byte	$02
	.byte	$2C
	.byte	$21
	.byte	$2C
	.byte	$2C
	.byte	$00
	.byte	$27
	.byte	$25
	.byte	$2D
	.byte	$33
	.byte	$00
	.byte	$23
	.byte	$2F
	.byte	$2C
	.byte	$2C
	.byte	$25
	.byte	$23
	.byte	$34
	.byte	$25
	.byte	$24
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$FE
	.byte	$00
	.byte	$02
	.byte	$C7
	.byte	$55
	.byte	$02
	.byte	$17
	.byte	$00
	.byte	$02
	.byte	$07
	.byte	$02
	.byte	$00
_level1_nam:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$08
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$0F
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$01
	.byte	$0F
	.byte	$40
	.byte	$41
	.byte	$10
	.byte	$44
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$0F
	.byte	$42
	.byte	$43
	.byte	$44
	.byte	$44
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$01
	.byte	$0F
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$0F
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$01
	.byte	$0F
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$0F
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$01
	.byte	$0F
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$0F
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$01
	.byte	$0F
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$11
	.byte	$44
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$0F
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$44
	.byte	$44
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$01
	.byte	$0F
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$0F
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$1A
	.byte	$BD
	.byte	$AD
	.byte	$AD
	.byte	$6D
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$B9
	.byte	$AD
	.byte	$AD
	.byte	$6E
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$B9
	.byte	$AD
	.byte	$AD
	.byte	$6E
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$0D
	.byte	$01
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$11
	.byte	$01
	.byte	$00
_level2_nam:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$C5
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$40
	.byte	$41
	.byte	$10
	.byte	$44
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$11
	.byte	$44
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$42
	.byte	$43
	.byte	$44
	.byte	$44
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$44
	.byte	$44
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$40
	.byte	$41
	.byte	$12
	.byte	$44
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$42
	.byte	$43
	.byte	$44
	.byte	$44
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$01
	.byte	$CE
	.byte	$40
	.byte	$70
	.byte	$01
	.byte	$03
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$4C
	.byte	$6A
	.byte	$BA
	.byte	$B9
	.byte	$BA
	.byte	$31
	.byte	$00
	.byte	$00
	.byte	$4C
	.byte	$7A
	.byte	$6A
	.byte	$01
	.byte	$02
	.byte	$31
	.byte	$00
	.byte	$00
	.byte	$4C
	.byte	$6A
	.byte	$01
	.byte	$02
	.byte	$BA
	.byte	$31
	.byte	$00
	.byte	$00
	.byte	$4C
	.byte	$7A
	.byte	$01
	.byte	$03
	.byte	$31
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$01
	.byte	$00
_level3_nam:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$C5
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$40
	.byte	$41
	.byte	$10
	.byte	$44
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$11
	.byte	$44
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$42
	.byte	$43
	.byte	$44
	.byte	$44
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$44
	.byte	$44
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$12
	.byte	$44
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$44
	.byte	$44
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$01
	.byte	$CE
	.byte	$40
	.byte	$70
	.byte	$01
	.byte	$03
	.byte	$30
	.byte	$00
	.byte	$40
	.byte	$7C
	.byte	$6A
	.byte	$BA
	.byte	$B9
	.byte	$BA
	.byte	$71
	.byte	$30
	.byte	$4C
	.byte	$6A
	.byte	$01
	.byte	$02
	.byte	$BA
	.byte	$B9
	.byte	$BA
	.byte	$31
	.byte	$4C
	.byte	$7A
	.byte	$6E
	.byte	$6A
	.byte	$6A
	.byte	$BA
	.byte	$7A
	.byte	$31
	.byte	$00
	.byte	$4C
	.byte	$7A
	.byte	$7E
	.byte	$7A
	.byte	$7A
	.byte	$31
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$01
	.byte	$00
_level4_nam:
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$85
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$02
	.byte	$13
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$02
	.byte	$13
	.byte	$40
	.byte	$41
	.byte	$10
	.byte	$44
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$02
	.byte	$07
	.byte	$42
	.byte	$43
	.byte	$44
	.byte	$44
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$02
	.byte	$07
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$11
	.byte	$44
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$02
	.byte	$07
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$44
	.byte	$44
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$40
	.byte	$41
	.byte	$12
	.byte	$44
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$02
	.byte	$07
	.byte	$42
	.byte	$43
	.byte	$44
	.byte	$44
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$02
	.byte	$07
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$13
	.byte	$44
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$02
	.byte	$07
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$44
	.byte	$44
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$02
	.byte	$13
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$02
	.byte	$13
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$02
	.byte	$8E
	.byte	$4C
	.byte	$AD
	.byte	$AD
	.byte	$71
	.byte	$70
	.byte	$70
	.byte	$30
	.byte	$40
	.byte	$7C
	.byte	$6E
	.byte	$B9
	.byte	$B9
	.byte	$BA
	.byte	$BA
	.byte	$31
	.byte	$4C
	.byte	$6A
	.byte	$02
	.byte	$02
	.byte	$BA
	.byte	$BA
	.byte	$B9
	.byte	$31
	.byte	$4C
	.byte	$6E
	.byte	$6A
	.byte	$02
	.byte	$02
	.byte	$BA
	.byte	$7A
	.byte	$31
	.byte	$4C
	.byte	$7A
	.byte	$7A
	.byte	$7E
	.byte	$AE
	.byte	$A9
	.byte	$31
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$0C
	.byte	$0D
	.byte	$0D
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$08
	.byte	$02
	.byte	$00
_level5_nam:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$83
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$40
	.byte	$41
	.byte	$10
	.byte	$44
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$11
	.byte	$44
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$42
	.byte	$43
	.byte	$44
	.byte	$44
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$44
	.byte	$44
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$40
	.byte	$41
	.byte	$12
	.byte	$44
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$13
	.byte	$44
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$42
	.byte	$43
	.byte	$44
	.byte	$44
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$44
	.byte	$44
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$BD
	.byte	$BD
	.byte	$AD
	.byte	$01
	.byte	$03
	.byte	$6D
	.byte	$6D
	.byte	$BD
	.byte	$A9
	.byte	$AD
	.byte	$AE
	.byte	$A9
	.byte	$AD
	.byte	$AE
	.byte	$6D
	.byte	$BD
	.byte	$AE
	.byte	$AE
	.byte	$BD
	.byte	$AE
	.byte	$01
	.byte	$02
	.byte	$6E
	.byte	$B9
	.byte	$AD
	.byte	$A9
	.byte	$A9
	.byte	$B9
	.byte	$AD
	.byte	$A9
	.byte	$6D
	.byte	$BD
	.byte	$AE
	.byte	$01
	.byte	$02
	.byte	$AD
	.byte	$AE
	.byte	$AE
	.byte	$6E
	.byte	$BD
	.byte	$B9
	.byte	$AD
	.byte	$AE
	.byte	$A9
	.byte	$AD
	.byte	$6E
	.byte	$6D
	.byte	$0D
	.byte	$01
	.byte	$07
	.byte	$01
	.byte	$00
_palGame1:
	.byte	$0F
	.byte	$11
	.byte	$32
	.byte	$30
	.byte	$0F
	.byte	$1C
	.byte	$2C
	.byte	$3C
	.byte	$0F
	.byte	$09
	.byte	$27
	.byte	$38
	.byte	$0F
	.byte	$11
	.byte	$21
	.byte	$31
_palGame2:
	.byte	$0F
	.byte	$11
	.byte	$32
	.byte	$30
	.byte	$0F
	.byte	$11
	.byte	$21
	.byte	$31
	.byte	$0F
	.byte	$07
	.byte	$27
	.byte	$38
	.byte	$0F
	.byte	$13
	.byte	$23
	.byte	$33
_palGame3:
	.byte	$0F
	.byte	$11
	.byte	$32
	.byte	$30
	.byte	$0F
	.byte	$15
	.byte	$25
	.byte	$35
	.byte	$0F
	.byte	$05
	.byte	$27
	.byte	$38
	.byte	$0F
	.byte	$13
	.byte	$23
	.byte	$33
_palGame4:
	.byte	$0F
	.byte	$11
	.byte	$32
	.byte	$30
	.byte	$0F
	.byte	$19
	.byte	$29
	.byte	$39
	.byte	$0F
	.byte	$0B
	.byte	$27
	.byte	$38
	.byte	$0F
	.byte	$17
	.byte	$27
	.byte	$37
_palGame5:
	.byte	$0F
	.byte	$11
	.byte	$32
	.byte	$30
	.byte	$0F
	.byte	$16
	.byte	$26
	.byte	$36
	.byte	$0F
	.byte	$07
	.byte	$27
	.byte	$38
	.byte	$0F
	.byte	$18
	.byte	$28
	.byte	$38
_palGameSpr:
	.byte	$0F
	.byte	$0F
	.byte	$29
	.byte	$30
	.byte	$0F
	.byte	$0F
	.byte	$26
	.byte	$30
	.byte	$0F
	.byte	$0F
	.byte	$24
	.byte	$30
	.byte	$0F
	.byte	$0F
	.byte	$21
	.byte	$30
_palTitle:
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$1C
	.byte	$2C
	.byte	$3C
	.byte	$0F
	.byte	$12
	.byte	$22
	.byte	$32
	.byte	$0F
	.byte	$14
	.byte	$24
	.byte	$34
_sprPlayer:
	.byte	$00
	.byte	$FF
	.byte	$49
	.byte	$00
	.byte	$08
	.byte	$FF
	.byte	$4A
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$4B
	.byte	$00
	.byte	$08
	.byte	$07
	.byte	$4C
	.byte	$00
	.byte	$80
_sprEnemy1:
	.byte	$00
	.byte	$FF
	.byte	$4D
	.byte	$01
	.byte	$08
	.byte	$FF
	.byte	$4E
	.byte	$01
	.byte	$00
	.byte	$07
	.byte	$4F
	.byte	$01
	.byte	$08
	.byte	$07
	.byte	$50
	.byte	$01
	.byte	$80
_sprEnemy2:
	.byte	$00
	.byte	$FF
	.byte	$4D
	.byte	$02
	.byte	$08
	.byte	$FF
	.byte	$4E
	.byte	$02
	.byte	$00
	.byte	$07
	.byte	$4F
	.byte	$02
	.byte	$08
	.byte	$07
	.byte	$50
	.byte	$02
	.byte	$80
_sprEnemy3:
	.byte	$00
	.byte	$FF
	.byte	$4D
	.byte	$03
	.byte	$08
	.byte	$FF
	.byte	$4E
	.byte	$03
	.byte	$00
	.byte	$07
	.byte	$4F
	.byte	$03
	.byte	$08
	.byte	$07
	.byte	$50
	.byte	$03
	.byte	$80
_sprListPlayer:
	.addr	_sprPlayer
	.addr	_sprEnemy1
	.addr	_sprEnemy2
	.addr	_sprEnemy3
_levelList:
	.addr	_level1_nam
	.addr	_palGame1
	.addr	_level2_nam
	.addr	_palGame2
	.addr	_level3_nam
	.addr	_palGame3
	.addr	_level4_nam
	.addr	_palGame3
	.addr	_level5_nam
	.addr	_palGame3
_updateListData:
	.byte	$28
	.byte	$00
	.byte	$44
	.byte	$28
	.byte	$00
	.byte	$44
	.byte	$28
	.byte	$00
	.byte	$44
	.byte	$28
	.byte	$00
	.byte	$44
	.byte	$20
	.byte	$4F
	.byte	$10
	.byte	$20
	.byte	$50
	.byte	$10
	.byte	$20
	.byte	$51
	.byte	$10
	.byte	$FF
_statsStr:
	.byte	$2C
	.byte	$25
	.byte	$36
	.byte	$25
	.byte	$2C
	.byte	$1A
	.byte	$00
	.byte	$00
	.byte	$27
	.byte	$25
	.byte	$2D
	.byte	$33
	.byte	$1A
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0F
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$2C
	.byte	$29
	.byte	$36
	.byte	$25
	.byte	$33
	.byte	$1A
_screenMusicList:
	.byte	$00
	.byte	$03
	.byte	$04
_largeNums:
	.byte	$7A
	.byte	$7B
	.byte	$7C
	.byte	$7D
	.byte	$7C
	.byte	$7D
	.byte	$7E
	.byte	$7F
	.byte	$80
	.byte	$81
	.byte	$86
	.byte	$7B
	.byte	$87
	.byte	$88
	.byte	$89
	.byte	$8A
	.byte	$8B
	.byte	$8C
	.byte	$8D
	.byte	$7D
	.byte	$90
	.byte	$91
	.byte	$92
	.byte	$93
	.byte	$94
	.byte	$95
	.byte	$96
	.byte	$7F
	.byte	$94
	.byte	$95

.segment	"BSS"

_map:
	.res	208,$00
.segment	"ZEROPAGE"
_i:
	.res	1,$00
_j:
	.res	1,$00
_ptr:
	.res	1,$00
_spr:
	.res	1,$00
_px:
	.res	1,$00
_py:
	.res	1,$00
_wait:
	.res	1,$00
_i16:
	.res	2,$00
_iy:
	.res	2,$00
_dy:
	.res	2,$00
_dir:
	.res	4,$00
_nameRow:
	.res	32,$00
_player_all:
	.res	1,$00
_player_x:
	.res	8,$00
_player_y:
	.res	8,$00
_player_dir:
	.res	4,$00
_player_cnt:
	.res	8,$00
_player_speed:
	.res	8,$00
_player_wait:
	.res	4,$00
_items_count:
	.res	1,$00
_items_collected:
	.res	1,$00
_game_level:
	.res	1,$00
_game_lives:
	.res	1,$00
_game_done:
	.res	1,$00
_game_paused:
	.res	1,$00
_game_clear:
	.res	1,$00
_frame_cnt:
	.res	1,$00
_bright:
	.res	1,$00
_update_list:
	.res	22,$00

; ---------------------------------------------------------------
; void __near__ pal_fade_to (unsigned int to)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_pal_fade_to: near

.segment	"CODE"

;
; {
;
	jsr     pushax
;
; if(!to) music_stop();
;
	ldy     #$01
	lda     (sp),y
	dey
	ora     (sp),y
	bne     L0005
	jsr     _music_stop
;
; while(bright!=to)
;
	jmp     L0005
;
; delay(4);
;
L0003:	lda     #$04
	jsr     _delay
;
; if(bright<to) ++bright; else --bright;
;
	ldx     #$00
	lda     _bright
	ldy     #$00
	cmp     (sp),y
	txa
	iny
	sbc     (sp),y
	bcs     L000B
	inc     _bright
	jmp     L000A
L000B:	dec     _bright
;
; pal_bright(bright);
;
L000A:	lda     _bright
	jsr     _pal_bright
;
; while(bright!=to)
;
L0005:	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	cpx     #$00
	bne     L0003
	cmp     _bright
	bne     L0003
;
; if(!bright)
;
	lda     _bright
	bne     L0008
;
; ppu_off();
;
	jsr     _ppu_off
;
; set_vram_update(NULL);
;
	ldx     #$00
	txa
	jsr     _set_vram_update
;
; scroll(0,0);
;
	jsr     push0
	jsr     _scroll
;
; }
;
L0008:	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ title_screen (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_title_screen: near

.segment	"CODE"

;
; scroll(-8,240);//title is aligned to the color attributes, so shift it a bit to the right
;
	ldx     #$FF
	lda     #$F8
	jsr     pushax
	inx
	lda     #$F0
	jsr     _scroll
;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(title_nam);
;
	lda     #<(_title_nam)
	ldx     #>(_title_nam)
	jsr     _vram_unrle
;
; vram_adr(NAMETABLE_C);//clear second nametable, as it is visible in the jumping effect
;
	ldx     #$28
	lda     #$00
	jsr     _vram_adr
;
; vram_fill(0,1024);
;
	lda     #$00
	jsr     pusha
	ldx     #$04
	jsr     _vram_fill
;
; pal_bg(palTitle);
;
	lda     #<(_palTitle)
	ldx     #>(_palTitle)
	jsr     _pal_bg
;
; pal_bright(4);
;
	lda     #$04
	jsr     _pal_bright
;
; ppu_on_bg();
;
	jsr     _ppu_on_bg
;
; delay(20);//delay just to make it look better
;
	lda     #$14
	jsr     _delay
;
; iy=240<<FP_BITS;
;
	ldx     #$0F
	lda     #$00
	sta     _iy
	stx     _iy+1
;
; dy=-8<<FP_BITS;
;
	ldx     #$FF
	lda     #$80
	sta     _dy
	stx     _dy+1
;
; frame_cnt=0;
;
	lda     #$00
	sta     _frame_cnt
;
; wait=160;
;
	lda     #$A0
	sta     _wait
;
; bright=4;
;
	lda     #$04
	sta     _bright
;
; ppu_wait_frame();
;
L0002:	jsr     _ppu_wait_frame
;
; scroll(-8,iy>>FP_BITS);
;
	ldx     #$FF
	lda     #$F8
	jsr     pushax
	lda     _iy
	ldx     _iy+1
	jsr     asrax4
	jsr     _scroll
;
; if(pad_trigger(0)&PAD_START) break;
;
	lda     #$00
	jsr     _pad_trigger
	and     #$08
	bne     L0003
;
; iy+=dy;
;
	lda     _dy
	clc
	adc     _iy
	sta     _iy
	lda     _dy+1
	adc     _iy+1
	sta     _iy+1
;
; if(iy<0)
;
	ldx     _iy+1
	cpx     #$80
	bcc     L0006
;
; iy=0;
;
	lda     #$00
	sta     _iy
	sta     _iy+1
;
; dy=-dy>>1;
;
	lda     _dy
	ldx     _dy+1
	jsr     negax
	jsr     asrax1
	sta     _dy
	stx     _dy+1
;
; if(dy>(-8<<FP_BITS)) dy-=2;
;
L0006:	lda     _dy
	cmp     #$81
	lda     _dy+1
	sbc     #$FF
	bvs     L0008
	eor     #$80
L0008:	bpl     L0007
	lda     _dy
	sec
	sbc     #$02
	sta     _dy
	bcs     L0007
	dec     _dy+1
;
; if(wait)
;
L0007:	lda     _wait
	beq     L000A
;
; --wait;
;
	dec     _wait
;
; else
;
	jmp     L0002
;
; pal_col(2,(frame_cnt&32)?0x0f:0x20);//blinking press start text
;
L000A:	lda     #$02
	jsr     pusha
	lda     _frame_cnt
	and     #$20
	beq     L0014
	lda     #$0F
	jmp     L0015
L0014:	lda     #$20
L0015:	jsr     _pal_col
;
; ++frame_cnt;
;
	inc     _frame_cnt
;
; while(1)
;
	jmp     L0002
;
; scroll(-8,0);//if start is pressed, show the title at whole
;
L0003:	ldx     #$FF
	lda     #$F8
	jsr     pushax
	inx
	txa
	jsr     _scroll
;
; sfx_play(SFX_START,0);
;
	lda     #$00
	jsr     pusha
	jsr     _sfx_play
;
; for(i=0;i<16;++i)//and blink the text faster
;
	lda     #$00
	sta     _i
	tax
L0016:	lda     _i
	cmp     #$10
	bcs     L0019
;
; pal_col(2,i&1?0x0f:0x20);
;
	lda     #$02
	jsr     pusha
	lda     _i
	and     #$01
	beq     L0017
	lda     #$0F
	jmp     L0018
L0017:	lda     #$20
L0018:	jsr     _pal_col
;
; delay(4);
;
	lda     #$04
	jsr     _delay
;
; for(i=0;i<16;++i)//and blink the text faster
;
	ldx     #$00
	inc     _i
	jmp     L0016
;
; pal_fade_to(0);
;
L0019:	txa
	jmp     _pal_fade_to

.endproc

; ---------------------------------------------------------------
; void __near__ show_screen (unsigned char num)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_show_screen: near

.segment	"CODE"

;
; {
;
	jsr     pusha
;
; scroll(-4,0); //all the screens are misaligneg horizontally by half of a tile
;
	ldx     #$FF
	lda     #$FC
	jsr     pushax
	inx
	txa
	jsr     _scroll
;
; if(num<LEVELS_ALL) spr=0; else spr=num-LEVELS_ALL+1;//get offset in the screens list
;
	ldy     #$00
	lda     (sp),y
	cmp     #$05
	bcs     L001D
	tya
	jmp     L001A
L001D:	lda     (sp),y
	sec
	sbc     #$05
	clc
	adc     #$01
L001A:	sta     _spr
;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	tya
	jsr     _vram_adr
;
; vram_unrle(screenList[spr]);
;
	ldx     #$00
	lda     _spr
	asl     a
	bcc     L001B
	inx
	clc
L001B:	adc     #<(_screenList)
	sta     ptr1
	txa
	adc     #>(_screenList)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _vram_unrle
;
; if(!spr)//if it is the level screen, print large number
;
	lda     _spr
	bne     L0008
;
; j=num<<1;
;
	tay
	lda     (sp),y
	asl     a
	sta     _j
;
; i16=0x2194;//position of the number in the nametable
;
	ldx     #$21
	lda     #$94
	sta     _i16
	stx     _i16+1
;
; for(i=0;i<3;++i)
;
	sty     _i
L001E:	lda     _i
	cmp     #$03
	bcs     L0008
;
; vram_adr(i16);
;
	lda     _i16
	ldx     _i16+1
	jsr     _vram_adr
;
; vram_put(largeNums[j]);
;
	ldy     _j
	lda     _largeNums,y
	jsr     _vram_put
;
; vram_put(largeNums[j+1]);
;
	ldx     #$00
	lda     _j
	clc
	adc     #$01
	bcc     L000C
	inx
L000C:	sta     ptr1
	txa
	clc
	adc     #>(_largeNums)
	sta     ptr1+1
	ldy     #<(_largeNums)
	lda     (ptr1),y
	jsr     _vram_put
;
; j+=10;
;
	lda     #$0A
	clc
	adc     _j
	sta     _j
;
; i16+=32;
;
	lda     #$20
	clc
	adc     _i16
	sta     _i16
	bcc     L000D
	inc     _i16+1
;
; for(i=0;i<3;++i)
;
L000D:	inc     _i
	jmp     L001E
;
; i16=(num==SCREEN_GAMEOVER)?0x1525:0x1121;//two colors for flashing text in LSB and MSB
;
L0008:	ldy     #$00
	lda     (sp),y
	cmp     #$05
	bne     L000E
	ldx     #$15
	lda     #$25
	jmp     L000F
L000E:	ldx     #$11
	lda     #$21
L000F:	sta     _i16
	stx     _i16+1
;
; frame_cnt=0;
;
	sty     _frame_cnt
;
; pal_col(2,i16&0xff);//this palette entry is used for flashing text
;
	lda     #$02
	jsr     pusha
	lda     _i16
	jsr     _pal_col
;
; pal_col(3,0x30);
;
	lda     #$03
	jsr     pusha
	lda     #$30
	jsr     _pal_col
;
; pal_col(6,0x30);
;
	lda     #$06
	jsr     pusha
	lda     #$30
	jsr     _pal_col
;
; ppu_on_bg();
;
	jsr     _ppu_on_bg
;
; pal_fade_to(4);
;
	ldx     #$00
	lda     #$04
	jsr     _pal_fade_to
;
; music_play(screenMusicList[spr]);
;
	ldy     _spr
	lda     _screenMusicList,y
	jsr     _music_play
;
; if(!spr)//if it is the level screen, just wait one second
;
	lda     _spr
	bne     L0013
;
; delay(50);
;
	lda     #$32
	jsr     _delay
;
; else//otherwise wait for Start button and display flashing text
;
	jmp     L0014
;
; ppu_wait_frame();
;
L0013:	jsr     _ppu_wait_frame
;
; pal_col(2,frame_cnt&2?i16&0xff:i16>>8);
;
	lda     #$02
	jsr     pusha
	lda     _frame_cnt
	and     #$02
	beq     L001F
	lda     _i16
	jmp     L0020
L001F:	lda     _i16+1
L0020:	jsr     _pal_col
;
; if(pad_trigger(0)&PAD_START) break;
;
	lda     #$00
	jsr     _pad_trigger
	ldx     #$00
	and     #$08
	bne     L0021
;
; ++frame_cnt;
;
	inc     _frame_cnt
;
; while(1)
;
	jmp     L0013
;
; pal_fade_to(0);
;
L0014:	ldx     #$00
L0021:	txa
	jsr     _pal_fade_to
;
; }
;
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ player_move (unsigned char id, unsigned char dir)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_move: near

.segment	"CODE"

;
; {
;
	jsr     pusha
;
; px=player_x[id]>>(TILE_SIZE_BIT+FP_BITS);
;
	ldy     #$01
	ldx     #$00
	lda     (sp),y
	asl     a
	bcc     L000F
	inx
	clc
L000F:	adc     #<(_player_x)
	sta     ptr1
	txa
	adc     #>(_player_x)
	sta     ptr1+1
	lda     (ptr1),y
	sta     _px
;
; py=player_y[id]>>(TILE_SIZE_BIT+FP_BITS);
;
	ldx     #$00
	lda     (sp),y
	asl     a
	bcc     L0010
	inx
	clc
L0010:	adc     #<(_player_y)
	sta     ptr1
	txa
	adc     #>(_player_y)
	sta     ptr1+1
	lda     (ptr1),y
	sta     _py
;
; switch(dir)
;
	ldx     #$00
	lda     (sp,x)
;
; }
;
	cmp     #$10
	beq     L0014
	cmp     #$20
	beq     L0015
	cmp     #$40
	beq     L0012
	cmp     #$80
	beq     L0013
	jmp     L0016
;
; case DIR_LEFT:  --px; break;
;
L0012:	dec     _px
	jmp     L0016
;
; case DIR_RIGHT: ++px; break;
;
L0013:	inc     _px
	jmp     L0016
;
; case DIR_UP:    --py; break;
;
L0014:	dec     _py
	jmp     L0016
;
; case DIR_DOWN:  ++py; break;
;
L0015:	inc     _py
;
; if(map[MAP_ADR(px,py)]==TILE_WALL) return;
;
L0016:	lda     _py
	sec
	sbc     #$02
	bcs     L0009
	dex
L0009:	jsr     aslax4
	sta     ptr1
	stx     ptr1+1
	lda     _px
	ora     ptr1
	sta     ptr1
	lda     ptr1+1
	clc
	adc     #>(_map)
	sta     ptr1+1
	ldy     #<(_map)
	lda     (ptr1),y
	cmp     #$40
	beq     L0001
;
; player_cnt[id]=TILE_SIZE<<FP_BITS;
;
	ldy     #$01
	ldx     #$00
	lda     (sp),y
	asl     a
	bcc     L0011
	inx
	clc
L0011:	adc     #<(_player_cnt)
	sta     ptr1
	txa
	adc     #>(_player_cnt)
	sta     ptr1+1
	lda     #$00
	dey
	sta     (ptr1),y
	iny
	tya
	sta     (ptr1),y
;
; player_dir[id]=dir;
;
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sta     _player_dir,x
;
; }
;
L0001:	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ put_num (unsigned int adr, unsigned int num, unsigned char len)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_put_num: near

.segment	"CODE"

;
; {
;
	jsr     pusha
;
; vram_adr(adr);
;
	ldy     #$04
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     _vram_adr
;
; if(len>2) vram_put(0x10+num/100);
;
	ldy     #$00
	lda     (sp),y
	cmp     #$03
	bcc     L0008
	ldy     #$04
	jsr     pushwysp
	lda     #$64
	jsr     tosudiva0
	clc
	adc     #$10
	jsr     _vram_put
;
; if(len>1) vram_put(0x10+num/10%10);
;
	ldy     #$00
L0008:	lda     (sp),y
	cmp     #$02
	bcc     L0004
	ldy     #$04
	jsr     pushwysp
	lda     #$0A
	jsr     tosudiva0
	jsr     pushax
	lda     #$0A
	jsr     tosumoda0
	clc
	adc     #$10
	jsr     _vram_put
;
; vram_put(0x10+num%10);
;
L0004:	ldy     #$04
	jsr     pushwysp
	lda     #$0A
	jsr     tosumoda0
	clc
	adc     #$10
	jsr     _vram_put
;
; }
;
	jmp     incsp5

.endproc

; ---------------------------------------------------------------
; void __near__ game_loop (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_game_loop: near

.segment	"CODE"

;
; oam_clear();
;
	jsr     _oam_clear
;
; i=game_level<<1;
;
	lda     _game_level
	asl     a
	sta     _i
;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(levelList[i]);          //unpack level nametable
;
	ldx     #$00
	lda     _i
	asl     a
	bcc     L00CE
	inx
	clc
L00CE:	adc     #<(_levelList)
	sta     ptr1
	txa
	adc     #>(_levelList)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _vram_unrle
;
; vram_adr(NAMETABLE_A+0x0042);
;
	ldx     #$20
	lda     #$42
	jsr     _vram_adr
;
; vram_write((unsigned char*)statsStr,27);   //add game stats string
;
	lda     #<(_statsStr)
	ldx     #>(_statsStr)
	jsr     pushax
	ldx     #$00
	lda     #$1B
	jsr     _vram_write
;
; pal_bg(levelList[i+1]);             //set up background palette
;
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0002
	inx
L0002:	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_levelList)
	sta     ptr1
	lda     tmp1
	adc     #>(_levelList)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _pal_bg
;
; pal_spr(palGameSpr);               //set up sprites palette
;
	lda     #<(_palGameSpr)
	ldx     #>(_palGameSpr)
	jsr     _pal_spr
;
; player_all=0;
;
	lda     #$00
	sta     _player_all
;
; items_count=0;
;
	sta     _items_count
;
; items_collected=0;
;
	sta     _items_collected
;
; i16=NAMETABLE_A+0x0080;
;
	ldx     #$20
	lda     #$80
	sta     _i16
	stx     _i16+1
;
; ptr=0;
;
	lda     #$00
	sta     _ptr
;
; wait=0;
;
	sta     _wait
;
; for(i=2;i<MAP_HGT+2;++i)
;
	lda     #$02
	sta     _i
L00F7:	lda     _i
	cmp     #$0F
	jcs     L0004
;
; vram_adr(i16);
;
	lda     _i16
	ldx     _i16+1
	jsr     _vram_adr
;
; vram_read(nameRow,32);
;
	lda     #<(_nameRow)
	ldx     #>(_nameRow)
	jsr     pushax
	ldx     #$00
	lda     #$20
	jsr     _vram_read
;
; vram_adr(i16);
;
	lda     _i16
	ldx     _i16+1
	jsr     _vram_adr
;
; for(j=0;j<MAP_WDT<<1;j+=2)
;
	lda     #$00
L00C9:	sta     _j
	cmp     #$20
	jcs     L0008
;
; spr=nameRow[j];
;
	ldy     _j
	lda     _nameRow,y
	sta     _spr
;
; }
;
	cmp     #$10
	beq     L0011
	cmp     #$11
	beq     L0011
	cmp     #$12
	beq     L0011
	cmp     #$13
	beq     L0011
	cmp     #$45
	jeq     L00F9
	jmp     L00FA
;
; player_dir  [player_all]=DIR_NONE;
;
L0011:	ldy     _player_all
	lda     #$00
	sta     _player_dir,y
;
; player_x    [player_all]=(j<<3)<<FP_BITS;
;
	tax
	lda     _player_all
	asl     a
	bcc     L00CF
	inx
	clc
L00CF:	adc     #<(_player_x)
	sta     ptr1
	txa
	adc     #>(_player_x)
	sta     ptr1+1
	ldx     #$00
	lda     _j
	jsr     aslax3
	jsr     aslax4
	ldy     #$00
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
;
; player_y    [player_all]=(i<<4)<<FP_BITS;
;
	ldx     #$00
	lda     _player_all
	asl     a
	bcc     L00D0
	inx
	clc
L00D0:	adc     #<(_player_y)
	sta     ptr1
	txa
	adc     #>(_player_y)
	sta     ptr1+1
	ldx     #$00
	lda     _i
	jsr     aslax4
	jsr     aslax4
	dey
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
;
; player_cnt  [player_all]=0;
;
	ldx     #$00
	lda     _player_all
	asl     a
	bcc     L00D1
	inx
	clc
L00D1:	adc     #<(_player_cnt)
	sta     ptr1
	txa
	adc     #>(_player_cnt)
	sta     ptr1+1
	lda     #$00
	dey
	sta     (ptr1),y
	iny
	sta     (ptr1),y
;
; player_wait [player_all]=16+((spr-TILE_PLAYER)<<4);
;
	lda     #<(_player_wait)
	ldx     #>(_player_wait)
	clc
	adc     _player_all
	bcc     L0013
	inx
L0013:	sta     ptr1
	stx     ptr1+1
	lda     _spr
	sec
	sbc     #$10
	asl     a
	asl     a
	asl     a
	asl     a
	clc
	adc     #$10
	dey
	sta     (ptr1),y
;
; player_speed[player_all]=(spr==TILE_PLAYER)?2<<FP_BITS:10+((spr-TILE_ENEMY1)<<1);
;
	ldx     #$00
	lda     _player_all
	asl     a
	bcc     L00D2
	inx
	clc
L00D2:	adc     #<(_player_speed)
	sta     ptr1
	txa
	adc     #>(_player_speed)
	sta     ptr1+1
	ldx     #$00
	lda     _spr
	cmp     #$10
	bne     L00F8
	lda     #$20
	jmp     L012A
L00F8:	lda     _spr
	sec
	sbc     #$11
	bcs     L0018
	dex
L0018:	stx     tmp1
	asl     a
	rol     tmp1
	ldx     tmp1
	clc
	adc     #$0A
	bcc     L012A
	inx
L012A:	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
;
; ++player_all;
;
	inc     _player_all
;
; wait+=16;
;
	lda     #$10
	clc
	adc     _wait
	sta     _wait
;
; spr=TILE_EMPTY;
;
	lda     #$44
	sta     _spr
;
; break;
;
	jmp     L00FA
;
; ++items_count;
;
L00F9:	inc     _items_count
;
; map[ptr++]=spr;
;
L00FA:	lda     _ptr
	inc     _ptr
	clc
	adc     #<(_map)
	sta     ptr1
	lda     #$00
	adc     #>(_map)
	sta     ptr1+1
	lda     _spr
	ldy     #$00
	sta     (ptr1),y
;
; vram_put(spr);
;
	lda     _spr
	jsr     _vram_put
;
; vram_put(nameRow[j+1]);
;
	ldx     #$00
	lda     _j
	clc
	adc     #$01
	bcc     L001B
	inx
L001B:	sta     ptr1
	txa
	clc
	adc     #>(_nameRow)
	sta     ptr1+1
	ldy     #<(_nameRow)
	lda     (ptr1),y
	jsr     _vram_put
;
; for(j=0;j<MAP_WDT<<1;j+=2)
;
	lda     #$02
	clc
	adc     _j
	jmp     L00C9
;
; i16+=64;
;
L0008:	lda     #$40
	clc
	adc     _i16
	sta     _i16
	bcc     L001C
	inc     _i16+1
;
; for(i=2;i<MAP_HGT+2;++i)
;
L001C:	inc     _i
	jmp     L00F7
;
; memcpy(update_list,updateListData,sizeof(updateListData));
;
L0004:	lda     #<(_update_list)
	ldx     #>(_update_list)
	jsr     pushax
	lda     #<(_updateListData)
	ldx     #>(_updateListData)
	jsr     pushax
	ldx     #$00
	lda     #$16
	jsr     _memcpy
;
; set_vram_update(update_list);
;
	lda     #<(_update_list)
	ldx     #>(_update_list)
	jsr     _set_vram_update
;
; put_num(NAMETABLE_A+0x0048,game_level+1,1);
;
	jsr     decsp4
	lda     #$48
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$20
	sta     (sp),y
	ldx     #$00
	lda     _game_level
	clc
	adc     #$01
	bcc     L001D
	inx
L001D:	ldy     #$00
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	tya
	jsr     _put_num
;
; put_num(NAMETABLE_A+0x0053,items_count,3);
;
	jsr     decsp4
	lda     #$53
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$20
	sta     (sp),y
	lda     _items_count
	ldy     #$00
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     #$03
	jsr     _put_num
;
; put_num(NAMETABLE_A+0x005d,game_lives-1,1);
;
	jsr     decsp4
	lda     #$5D
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$20
	sta     (sp),y
	ldx     #$00
	lda     _game_lives
	sec
	sbc     #$01
	bcs     L001E
	dex
L001E:	ldy     #$00
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	tya
	jsr     _put_num
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; game_done=FALSE;
;
	lda     #$00
	sta     _game_done
;
; game_paused=FALSE;
;
	sta     _game_paused
;
; game_clear=FALSE;
;
	sta     _game_clear
;
; bright=0;
;
	sta     _bright
;
; frame_cnt=0;
;
	sta     _frame_cnt
;
; while(!game_done)
;
	jmp     L003D
;
; spr=(player_all-1)<<4;
;
L001F:	lda     _player_all
	sec
	sbc     #$01
	asl     a
	asl     a
	asl     a
	asl     a
	sta     _spr
;
; for(i=0;i<player_all;++i)
;
	lda     #$00
	sta     _i
L00FB:	lda     _i
	cmp     _player_all
	jcs     L0024
;
; py=player_y[i]>>FP_BITS;
;
	ldx     #$00
	lda     _i
	asl     a
	bcc     L00D3
	inx
	clc
L00D3:	adc     #<(_player_y)
	sta     ptr1
	txa
	adc     #>(_player_y)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     shrax4
	sta     _py
;
; if(player_wait[i])
;
	ldy     _i
	lda     _player_wait,y
	beq     L0029
;
; if(player_wait[i]>=16||player_wait[i]&2) py=240;
;
	ldy     _i
	lda     _player_wait,y
	cmp     #$10
	bcs     L00FC
	ldy     _i
	lda     _player_wait,y
	and     #$02
	beq     L0029
L00FC:	lda     #$F0
	sta     _py
;
; oam_meta_spr(player_x[i]>>FP_BITS,py,spr,sprListPlayer[i]);
;
L0029:	jsr     decsp3
	ldx     #$00
	lda     _i
	asl     a
	bcc     L00D4
	inx
	clc
L00D4:	adc     #<(_player_x)
	sta     ptr1
	txa
	adc     #>(_player_x)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     shrax4
	ldy     #$02
	sta     (sp),y
	lda     _py
	dey
	sta     (sp),y
	lda     _spr
	dey
	sta     (sp),y
	ldx     #$00
	lda     _i
	asl     a
	bcc     L00D5
	inx
	clc
L00D5:	adc     #<(_sprListPlayer)
	sta     ptr1
	txa
	adc     #>(_sprListPlayer)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _oam_meta_spr
;
; spr-=16;
;
	lda     _spr
	sec
	sbc     #$10
	sta     _spr
;
; for(i=0;i<player_all;++i)
;
	inc     _i
	jmp     L00FB
;
; ppu_wait_frame();
;
L0024:	jsr     _ppu_wait_frame
;
; ++frame_cnt;
;
	inc     _frame_cnt
;
; if(!(frame_cnt&3))
;
	lda     _frame_cnt
	and     #$03
	bne     L0103
;
; if(!game_paused&&bright<4) ++bright;
;
	lda     _game_paused
	bne     L002F
	lda     _bright
	cmp     #$04
	bcs     L002F
	inc     _bright
;
; if( game_paused&&bright>2) --bright;
;
L002F:	lda     _game_paused
	beq     L0102
	lda     _bright
	cmp     #$03
	bcc     L0102
	dec     _bright
;
; pal_bright(bright);
;
L0102:	lda     _bright
	jsr     _pal_bright
;
; i=pad_trigger(0);
;
L0103:	lda     #$00
	jsr     _pad_trigger
	sta     _i
;
; if(i&PAD_START)
;
	and     #$08
	beq     L0037
;
; game_paused^=TRUE;
;
	lda     _game_paused
	eor     #$01
	sta     _game_paused
;
; music_pause(game_paused);
;
	jsr     _music_pause
;
; if(game_paused) continue;
;
L0037:	lda     _game_paused
	jne     L003D
;
; bank_bg((frame_cnt>>4)&1);
;
	lda     _frame_cnt
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	and     #$01
	jsr     _bank_bg
;
; bank_spr((frame_cnt>>3)&1);
;
	lda     _frame_cnt
	lsr     a
	lsr     a
	lsr     a
	and     #$01
	jsr     _bank_spr
;
; if(wait)
;
	lda     _wait
	beq     L0104
;
; --wait;
;
	dec     _wait
;
; if(!wait) music_play(MUSIC_GAME);//start the music when all the objects spawned
;
	bne     L0104
	lda     #$01
	jsr     _music_play
;
; if(items_collected==items_count)
;
L0104:	lda     _items_collected
	cmp     _items_count
	bne     L0105
;
; music_play(MUSIC_CLEAR);
;
	lda     #$02
	jsr     _music_play
;
; game_done=TRUE;
;
	lda     #$01
	sta     _game_done
;
; game_clear=TRUE;
;
	sta     _game_clear
;
; for(i=0;i<player_all;++i)
;
L0105:	lda     #$00
	sta     _i
L0106:	lda     _i
	cmp     _player_all
	jcs     L003D
;
; if(player_wait[i])
;
	ldy     _i
	ldx     #$00
	lda     _player_wait,y
	beq     L0040
;
; if(player_wait[i]==16) sfx_play(i?SFX_RESPAWN2:SFX_RESPAWN1,i);
;
	ldy     _i
	lda     _player_wait,y
	cmp     #$10
	bne     L0042
	lda     _i
	beq     L0107
	lda     #$03
	jmp     L0108
L0107:	lda     #$02
L0108:	jsr     pusha
	lda     _i
	jsr     _sfx_play
;
; --player_wait[i];
;
L0042:	lda     #<(_player_wait)
	ldx     #>(_player_wait)
	clc
	adc     _i
	bcc     L0046
	inx
L0046:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; continue;
;
	jmp     L0127
;
; if(wait) continue; //don't process object movements if spawn animation is running
;
L0040:	lda     _wait
	jne     L0127
;
; if(i)
;
	lda     _i
	jeq     L0109
;
; if(!((player_x[i]+(4 <<FP_BITS))>=(player_x[0]+(12<<FP_BITS))||
;
	asl     a
	bcc     L00D6
	inx
	clc
L00D6:	adc     #<(_player_x)
	sta     ptr1
	txa
	adc     #>(_player_x)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	clc
	adc     #$40
	bcc     L004A
	inx
L004A:	jsr     pushax
	lda     _player_x
	ldx     _player_x+1
	clc
	adc     #$C0
	bcc     L004B
	inx
L004B:	jsr     tosicmp
	jcs     L004C
;
; (player_x[i]+(12<<FP_BITS))< (player_x[0]+(4 <<FP_BITS))||
;
	ldx     #$00
	lda     _i
	asl     a
	bcc     L00D7
	inx
	clc
L00D7:	adc     #<(_player_x)
	sta     ptr1
	txa
	adc     #>(_player_x)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	clc
	adc     #$C0
	bcc     L004D
	inx
L004D:	jsr     pushax
	lda     _player_x
	ldx     _player_x+1
	clc
	adc     #$40
	bcc     L004E
	inx
L004E:	jsr     tosicmp
	bcc     L004C
;
; (player_y[i]+(4 <<FP_BITS))>=(player_y[0]+(12<<FP_BITS))||
;
	ldx     #$00
	lda     _i
	asl     a
	bcc     L00D8
	inx
	clc
L00D8:	adc     #<(_player_y)
	sta     ptr1
	txa
	adc     #>(_player_y)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	clc
	adc     #$40
	bcc     L004F
	inx
L004F:	jsr     pushax
	lda     _player_y
	ldx     _player_y+1
	clc
	adc     #$C0
	bcc     L0050
	inx
L0050:	jsr     tosicmp
	bcs     L004C
;
; (player_y[i]+(12<<FP_BITS))< (player_y[0]+(4 <<FP_BITS))))
;
	ldx     #$00
	lda     _i
	asl     a
	bcc     L00D9
	inx
	clc
L00D9:	adc     #<(_player_y)
	sta     ptr1
	txa
	adc     #>(_player_y)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	clc
	adc     #$C0
	bcc     L0051
	inx
L0051:	jsr     pushax
	lda     _player_y
	ldx     _player_y+1
	clc
	adc     #$40
	bcc     L0052
	inx
L0052:	jsr     tosicmp
	bcc     L004C
	lda     #$00
	jmp     L0053
L004C:	lda     #$01
L0053:	jsr     bnega
	beq     L0054
;
; if(!game_clear)
;
	lda     _game_clear
	bne     L0054
;
; music_play(MUSIC_LOSE);
;
	lda     #$05
	jsr     _music_play
;
; game_done=TRUE;
;
	lda     #$01
	sta     _game_done
;
; break;
;
	jmp     L003D
;
; if(player_cnt[i])
;
L0054:	ldx     #$00
L0109:	lda     _i
	asl     a
	bcc     L00DA
	inx
	clc
L00DA:	adc     #<(_player_cnt)
	sta     ptr1
	txa
	adc     #>(_player_cnt)
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	iny
	ora     (ptr1),y
	jeq     L0068
;
; switch(player_dir[i])
;
	ldy     _i
	ldx     #$00
	lda     _player_dir,y
;
; }
;
	cmp     #$10
	jeq     L010C
	cmp     #$20
	beq     L010B
	cmp     #$40
	beq     L010A
	cmp     #$80
	jne     L010D
;
; case DIR_RIGHT: player_x[i]+=player_speed[i]; break;
;
	lda     _i
	asl     a
	bcc     L00DB
	inx
	clc
L00DB:	adc     #<(_player_x)
	tay
	txa
	adc     #>(_player_x)
	tax
	tya
	sta     ptr2
	stx     ptr2+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sta     sreg
	stx     sreg+1
	ldx     #$00
	lda     _i
	asl     a
	bcc     L00DC
	inx
	clc
L00DC:	adc     #<(_player_speed)
	sta     ptr1
	txa
	adc     #>(_player_speed)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	clc
	adc     sreg
	pha
	txa
	adc     sreg+1
	tax
	pla
	sta     (ptr2),y
	iny
	txa
	sta     (ptr2),y
	jmp     L0058
;
; case DIR_LEFT:  player_x[i]-=player_speed[i]; break;
;
L010A:	lda     _i
	asl     a
	bcc     L00DD
	inx
	clc
L00DD:	adc     #<(_player_x)
	tay
	txa
	adc     #>(_player_x)
	jmp     L0144
;
; case DIR_DOWN:  player_y[i]+=player_speed[i]; break;
;
L010B:	lda     _i
	asl     a
	bcc     L00DF
	inx
	clc
L00DF:	adc     #<(_player_y)
	tay
	txa
	adc     #>(_player_y)
	tax
	tya
	sta     ptr2
	stx     ptr2+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sta     sreg
	stx     sreg+1
	ldx     #$00
	lda     _i
	asl     a
	bcc     L00E0
	inx
	clc
L00E0:	adc     #<(_player_speed)
	sta     ptr1
	txa
	adc     #>(_player_speed)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	clc
	adc     sreg
	pha
	txa
	adc     sreg+1
	tax
	pla
	sta     (ptr2),y
	iny
	txa
	sta     (ptr2),y
	jmp     L0058
;
; case DIR_UP:    player_y[i]-=player_speed[i]; break;
;
L010C:	lda     _i
	asl     a
	bcc     L00E1
	inx
	clc
L00E1:	adc     #<(_player_y)
	tay
	txa
	adc     #>(_player_y)
L0144:	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	ldx     #$00
	lda     _i
	asl     a
	bcc     L00E2
	inx
	clc
L00E2:	adc     #<(_player_speed)
	sta     ptr1
	txa
	adc     #>(_player_speed)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     tossubax
	ldy     #$00
	jsr     staxspidx
;
; player_cnt[i]-=player_speed[i];
;
L0058:	ldx     #$00
L010D:	lda     _i
	asl     a
	bcc     L00E3
	inx
	clc
L00E3:	adc     #<(_player_cnt)
	tay
	txa
	adc     #>(_player_cnt)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	ldx     #$00
	lda     _i
	asl     a
	bcc     L00E4
	inx
	clc
L00E4:	adc     #<(_player_speed)
	sta     ptr1
	txa
	adc     #>(_player_speed)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     tossubax
	ldy     #$00
	jsr     staxspidx
;
; if(player_cnt[i]<=0)
;
	ldx     #$00
	lda     _i
	asl     a
	bcc     L00E5
	inx
	clc
L00E5:	adc     #<(_player_cnt)
	sta     ptr1
	txa
	adc     #>(_player_cnt)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	cmp     #$01
	txa
	sbc     #$00
	bvc     L005E
	eor     #$80
L005E:	asl     a
	ldx     #$00
	jcc     L010E
;
; if(player_cnt[i]<0) //overrun
;
	lda     _i
	asl     a
	bcc     L00E6
	inx
	clc
L00E6:	adc     #<(_player_cnt)
	sta     ptr1
	txa
	adc     #>(_player_cnt)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	cpx     #$80
	jcc     L005F
;
; player_cnt[i]=0;
;
	ldx     #$00
	lda     _i
	asl     a
	bcc     L00E7
	inx
	clc
L00E7:	adc     #<(_player_cnt)
	sta     ptr1
	txa
	adc     #>(_player_cnt)
	sta     ptr1+1
	lda     #$00
	dey
	sta     (ptr1),y
	iny
	sta     (ptr1),y
;
; player_x[i]=(player_x[i]&0xff00)+(player_dir[i]==DIR_LEFT?0x100:0);
;
	tax
	lda     _i
	asl     a
	bcc     L00E8
	inx
	clc
L00E8:	adc     #<(_player_x)
	sta     sreg
	txa
	adc     #>(_player_x)
	sta     sreg+1
	ldx     #$00
	lda     _i
	asl     a
	bcc     L00E9
	inx
	clc
L00E9:	adc     #<(_player_x)
	sta     ptr1
	txa
	adc     #>(_player_x)
	sta     ptr1+1
	lda     (ptr1),y
	sta     ptr1+1
	ldy     _i
	ldx     #$00
	lda     _player_dir,y
	cmp     #$40
	bne     L00CB
	inx
L00CB:	lda     #$00
	clc
	pha
	txa
	adc     ptr1+1
	tax
	pla
	ldy     #$00
	sta     (sreg),y
	iny
	txa
	sta     (sreg),y
;
; player_y[i]=(player_y[i]&0xff00)+(player_dir[i]==DIR_UP  ?0x100:0);
;
	ldx     #$00
	lda     _i
	asl     a
	bcc     L00EA
	inx
	clc
L00EA:	adc     #<(_player_y)
	sta     sreg
	txa
	adc     #>(_player_y)
	sta     sreg+1
	ldx     #$00
	lda     _i
	asl     a
	bcc     L00EB
	inx
	clc
L00EB:	adc     #<(_player_y)
	sta     ptr1
	txa
	adc     #>(_player_y)
	sta     ptr1+1
	lda     (ptr1),y
	sta     ptr1+1
	ldy     _i
	ldx     #$00
	lda     _player_dir,y
	cmp     #$10
	bne     L00CC
	inx
L00CC:	lda     #$00
	clc
	pha
	txa
	adc     ptr1+1
	tax
	pla
	ldy     #$00
	sta     (sreg),y
	iny
	txa
	sta     (sreg),y
;
; if(!i)
;
L005F:	lda     _i
	jne     L0068
;
; (player_y[i]>>(TILE_SIZE_BIT+FP_BITS)));
;
	tax
	lda     _i
	asl     a
	bcc     L00EC
	inx
	clc
L00EC:	adc     #<(_player_y)
	sta     ptr1
	txa
	adc     #>(_player_y)
	sta     ptr1+1
	lda     (ptr1),y
	ldx     #$00
	sec
	sbc     #$02
	bcs     L0067
	dex
L0067:	jsr     shlax4
	sta     sreg
	stx     sreg+1
	ldx     #$00
	lda     _i
	asl     a
	bcc     L00ED
	inx
	clc
L00ED:	adc     #<(_player_x)
	sta     ptr1
	txa
	adc     #>(_player_x)
	sta     ptr1+1
	lda     (ptr1),y
	ora     sreg
	pha
	lda     sreg+1
	sta     _i16+1
	pla
	sta     _i16
;
; if(map[i16]==TILE_ITEM)
;
	sta     ptr1
	lda     _i16+1
	clc
	adc     #>(_map)
	sta     ptr1+1
	ldy     #<(_map)
	ldx     #$00
	lda     (ptr1),y
	cmp     #$45
	jne     L010E
;
; map[i16]=TILE_EMPTY; //mark as collected in the game map
;
	lda     _i16
	clc
	adc     #<(_map)
	sta     ptr1
	lda     _i16+1
	adc     #>(_map)
	sta     ptr1+1
	lda     #$44
	ldy     #$00
	sta     (ptr1),y
;
; sfx_play(SFX_ITEM,2);
;
	lda     #$01
	jsr     pusha
	lda     #$02
	jsr     _sfx_play
;
; ++items_collected;
;
	inc     _items_collected
;
; i16=NAMETABLE_A+0x0080+(((player_y[i]>>(TILE_SIZE_BIT+FP_BITS))-2)<<6)|
;
	ldx     #$00
	lda     _i
	asl     a
	bcc     L00EE
	inx
	clc
L00EE:	adc     #<(_player_y)
	sta     ptr1
	txa
	adc     #>(_player_y)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	ldx     #$00
	sec
	sbc     #$02
	bcs     L0069
	dex
L0069:	jsr     shlax4
	jsr     shlax2
	clc
	adc     #$80
;
; ((player_x[i]>>(TILE_SIZE_BIT+FP_BITS))<<1);
;
	sta     sreg
;
; i16=NAMETABLE_A+0x0080+(((player_y[i]>>(TILE_SIZE_BIT+FP_BITS))-2)<<6)|
;
	txa
	adc     #$20
;
; ((player_x[i]>>(TILE_SIZE_BIT+FP_BITS))<<1);
;
	sta     sreg+1
	ldx     #$00
	lda     _i
	asl     a
	bcc     L00EF
	inx
	clc
L00EF:	adc     #<(_player_x)
	sta     ptr1
	txa
	adc     #>(_player_x)
	sta     ptr1+1
	lda     (ptr1),y
	ldx     #$00
	asl     a
	bcc     L00C8
	inx
L00C8:	ora     sreg
	sta     _i16
	txa
	ora     sreg+1
	sta     _i16+1
;
; update_list[0]=i16>>8;
;
	sta     _update_list
;
; update_list[1]=i16&255;
;
	lda     _i16
	sta     _update_list+1
;
; update_list[3]=update_list[0];
;
	lda     _update_list
	sta     _update_list+3
;
; update_list[4]=update_list[1]+1;
;
	lda     _update_list+1
	clc
	adc     #$01
	sta     _update_list+4
;
; i16+=32;
;
	lda     #$20
	clc
	adc     _i16
	sta     _i16
	bcc     L006B
	inc     _i16+1
;
; update_list[6]=i16>>8;
;
L006B:	lda     _i16+1
	sta     _update_list+6
;
; update_list[7]=i16&255;
;
	lda     _i16
	sta     _update_list+7
;
; update_list[9]=update_list[6];
;
	lda     _update_list+6
	sta     _update_list+9
;
; update_list[10]=update_list[7]+1;
;
	lda     _update_list+7
	clc
	adc     #$01
	sta     _update_list+10
;
; update_list[14]=0x10+items_collected/100;
;
	lda     _items_collected
	jsr     pusha0
	lda     #$64
	jsr     tosudiva0
	clc
	adc     #$10
	sta     _update_list+14
;
; update_list[17]=0x10+items_collected/10%10;
;
	lda     _items_collected
	jsr     pusha0
	lda     #$0A
	jsr     tosudiva0
	jsr     pushax
	ldx     #$00
	lda     #$0A
	jsr     tosmoda0
	clc
	adc     #$10
	sta     _update_list+17
;
; update_list[20]=0x10+items_collected%10;
;
	lda     _items_collected
	jsr     pusha0
	lda     #$0A
	jsr     tosumoda0
	clc
	adc     #$10
	sta     _update_list+20
;
; if(!player_cnt[i]) //movement to the next tile is done, set up new movement
;
L0068:	ldx     #$00
L010E:	lda     _i
	asl     a
	bcc     L00F0
	inx
	clc
L00F0:	adc     #<(_player_cnt)
	sta     ptr1
	txa
	adc     #>(_player_cnt)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     bnegax
	jeq     L0127
;
; if(!i) //this is the player, process controls
;
	lda     _i
	bne     L0113
;
; j=pad_state(0);
;
	jsr     _pad_state
	sta     _j
;
; if(j&player_dir[0])
;
	lda     _player_dir
	and     _j
	pha
	pla
	beq     L010F
;
; j&=~player_dir[0]; //remove the direction from further check
;
	lda     _player_dir
	eor     #$FF
	and     _j
	sta     _j
;
; player_move(i,player_dir[0]); //change the direction
;
	lda     _i
	jsr     pusha
	lda     _player_dir
	jsr     _player_move
;
; if(j&PAD_LEFT)  player_move(i,DIR_LEFT);
;
L010F:	lda     _j
	and     #$40
	beq     L0110
	lda     _i
	jsr     pusha
	lda     #$40
	jsr     _player_move
;
; if(j&PAD_RIGHT) player_move(i,DIR_RIGHT);
;
L0110:	lda     _j
	and     #$80
	beq     L0111
	lda     _i
	jsr     pusha
	lda     #$80
	jsr     _player_move
;
; if(j&PAD_UP)    player_move(i,DIR_UP);
;
L0111:	lda     _j
	and     #$10
	beq     L0112
	lda     _i
	jsr     pusha
	lda     #$10
	jsr     _player_move
;
; if(j&PAD_DOWN)  player_move(i,DIR_DOWN);
;
L0112:	lda     _j
	and     #$20
	jeq     L0127
	lda     _i
	jsr     pusha
	lda     #$20
;
; else //this is an enemy, run AI
;
	jmp     L00CD
;
; i16=MAP_ADR((player_x[i]>>8),(player_y[i]>>8));
;
L0113:	lda     _i
	asl     a
	bcc     L00F1
	inx
	clc
L00F1:	adc     #<(_player_y)
	sta     ptr1
	txa
	adc     #>(_player_y)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	ldx     #$00
	sec
	sbc     #$02
	bcs     L0078
	dex
L0078:	jsr     shlax4
	sta     sreg
	stx     sreg+1
	ldx     #$00
	lda     _i
	asl     a
	bcc     L00F2
	inx
	clc
L00F2:	adc     #<(_player_x)
	sta     ptr1
	txa
	adc     #>(_player_x)
	sta     ptr1+1
	lda     (ptr1),y
	ora     sreg
	sta     _i16
	lda     sreg+1
	sta     _i16+1
;
; ptr=player_dir[i];
;
	ldy     _i
	lda     _player_dir,y
	sta     _ptr
;
; j=0;
;
	lda     #$00
	sta     _j
;
; if(ptr!=DIR_RIGHT&&map[i16-1]!=TILE_WALL) dir[j++]=DIR_LEFT;
;
	lda     _ptr
	cmp     #$80
	beq     L0116
	lda     _i16
	ldx     _i16+1
	sec
	sbc     #$01
	bcs     L007C
	dex
L007C:	sta     ptr1
	txa
	clc
	adc     #>(_map)
	sta     ptr1+1
	ldy     #<(_map)
	lda     (ptr1),y
	cmp     #$40
	beq     L0116
	lda     _j
	inc     _j
	clc
	adc     #<(_dir)
	sta     ptr1
	lda     #$00
	adc     #>(_dir)
	sta     ptr1+1
	lda     #$40
	ldy     #$00
	sta     (ptr1),y
;
; if(ptr!=DIR_LEFT &&map[i16+1]!=TILE_WALL) dir[j++]=DIR_RIGHT;
;
L0116:	lda     _ptr
	cmp     #$40
	beq     L0119
	lda     _i16
	ldx     _i16+1
	clc
	adc     #$01
	bcc     L0081
	inx
L0081:	sta     ptr1
	txa
	clc
	adc     #>(_map)
	sta     ptr1+1
	ldy     #<(_map)
	lda     (ptr1),y
	cmp     #$40
	beq     L0119
	lda     _j
	inc     _j
	clc
	adc     #<(_dir)
	sta     ptr1
	lda     #$00
	adc     #>(_dir)
	sta     ptr1+1
	lda     #$80
	ldy     #$00
	sta     (ptr1),y
;
; if(ptr!=DIR_DOWN &&map[i16-MAP_WDT]!=TILE_WALL) dir[j++]=DIR_UP;
;
L0119:	lda     _ptr
	cmp     #$20
	beq     L011C
	lda     _i16
	ldx     _i16+1
	sec
	sbc     #$10
	bcs     L0086
	dex
L0086:	sta     ptr1
	txa
	clc
	adc     #>(_map)
	sta     ptr1+1
	ldy     #<(_map)
	lda     (ptr1),y
	cmp     #$40
	beq     L011C
	lda     _j
	inc     _j
	clc
	adc     #<(_dir)
	sta     ptr1
	lda     #$00
	adc     #>(_dir)
	sta     ptr1+1
	lda     #$10
	ldy     #$00
	sta     (ptr1),y
;
; if(ptr!=DIR_UP   &&map[i16+MAP_WDT]!=TILE_WALL) dir[j++]=DIR_DOWN;
;
L011C:	lda     _ptr
	cmp     #$10
	beq     L011F
	lda     _i16
	ldx     _i16+1
	clc
	adc     #$10
	bcc     L008B
	inx
L008B:	sta     ptr1
	txa
	clc
	adc     #>(_map)
	sta     ptr1+1
	ldy     #<(_map)
	lda     (ptr1),y
	cmp     #$40
	beq     L011F
	lda     _j
	inc     _j
	clc
	adc     #<(_dir)
	sta     ptr1
	lda     #$00
	adc     #>(_dir)
	sta     ptr1+1
	lda     #$20
	ldy     #$00
	sta     (ptr1),y
;
; player_move(i,dir[rand8()%j]);
;
L011F:	lda     _i
	jsr     pusha
	jsr     _rand8
	jsr     pushax
	lda     _j
	jsr     tosumoda0
	sta     ptr1
	txa
	clc
	adc     #>(_dir)
	sta     ptr1+1
	ldy     #<(_dir)
	lda     (ptr1),y
	jsr     _player_move
;
; if(j>1)
;
	lda     _j
	cmp     #$02
	jcc     L0127
;
; if(ptr!=DIR_DOWN &&player_y[0]<player_y[i]) player_move(i,DIR_UP);
;
	lda     _ptr
	cmp     #$20
	beq     L0121
	lda     _player_y
	ldx     _player_y+1
	jsr     pushax
	ldx     #$00
	lda     _i
	asl     a
	bcc     L00F3
	inx
	clc
L00F3:	adc     #<(_player_y)
	sta     ptr1
	txa
	adc     #>(_player_y)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     tosicmp
	bcs     L0121
	lda     _i
	jsr     pusha
	lda     #$10
	jsr     _player_move
;
; if(ptr!=DIR_UP   &&player_y[0]>player_y[i]) player_move(i,DIR_DOWN);
;
L0121:	lda     _ptr
	cmp     #$10
	beq     L0123
	lda     _player_y
	ldx     _player_y+1
	jsr     pushax
	ldx     #$00
	lda     _i
	asl     a
	bcc     L00F4
	inx
	clc
L00F4:	adc     #<(_player_y)
	sta     ptr1
	txa
	adc     #>(_player_y)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     tosicmp
	beq     L0123
	bcc     L0123
	lda     _i
	jsr     pusha
	lda     #$20
	jsr     _player_move
;
; if(ptr!=DIR_RIGHT&&player_x[0]<player_x[i]) player_move(i,DIR_LEFT);
;
L0123:	lda     _ptr
	cmp     #$80
	beq     L0125
	lda     _player_x
	ldx     _player_x+1
	jsr     pushax
	ldx     #$00
	lda     _i
	asl     a
	bcc     L00F5
	inx
	clc
L00F5:	adc     #<(_player_x)
	sta     ptr1
	txa
	adc     #>(_player_x)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     tosicmp
	bcs     L0125
	lda     _i
	jsr     pusha
	lda     #$40
	jsr     _player_move
;
; if(ptr!=DIR_LEFT &&player_x[0]>player_x[i]) player_move(i,DIR_RIGHT);
;
L0125:	lda     _ptr
	cmp     #$40
	beq     L0127
	lda     _player_x
	ldx     _player_x+1
	jsr     pushax
	ldx     #$00
	lda     _i
	asl     a
	bcc     L00F6
	inx
	clc
L00F6:	adc     #<(_player_x)
	sta     ptr1
	txa
	adc     #>(_player_x)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     tosicmp
	beq     L0127
	bcc     L0127
	lda     _i
	jsr     pusha
	lda     #$80
L00CD:	jsr     _player_move
;
; for(i=0;i<player_all;++i)
;
L0127:	inc     _i
	jmp     L0106
;
; while(!game_done)
;
L003D:	lda     _game_done
	jeq     L001F
;
; delay(100);
;
	lda     #$64
	jsr     _delay
;
; pal_fade_to(0);
;
	ldx     #$00
	txa
	jmp     _pal_fade_to

.endproc

; ---------------------------------------------------------------
; void __near__ setup_graphics (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_setup_graphics: near

.segment	"CODE"

;
; vram_adr(0x0);
;
	ldx     #$00
	txa
	jsr     _vram_adr
;
; vram_write(0x8000, 0x2000);
;
	ldx     #$80
	lda     #$00
	jsr     pushax
	ldx     #$20
	jmp     _vram_write

.endproc

; ---------------------------------------------------------------
; void __near__ setup_sound (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_setup_sound: near

.segment	"CODE"

;
; famitone_init(&music_data);
;
	lda     #<(_music_data)
	ldx     #>(_music_data)
	jsr     _famitone_init
;
; sfx_init(&sound_data);
;
	lda     #<(_sound_data)
	ldx     #>(_sound_data)
	jsr     _sfx_init
;
; nmi_set_callback(famitone_update);
;
	lda     #<(_famitone_update)
	ldx     #>(_famitone_update)
	jmp     _nmi_set_callback

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; SET_REG(0);
;
	lda     #$00
	sta     $C000
;
; setup_graphics();
;
	jsr     _setup_graphics
;
; SET_REG(1);
;
	lda     #$01
	sta     $C000
;
; setup_sound();
;
	jsr     _setup_sound
;
; title_screen();
;
L0002:	jsr     _title_screen
;
; game_level=0;
;
	lda     #$00
	sta     _game_level
;
; game_lives=4;
;
	lda     #$04
	sta     _game_lives
;
; while(game_lives&&game_level<LEVELS_ALL)//loop for gameplay
;
	jmp     L000C
;
; show_screen(game_level);
;
L0010:	lda     _game_level
	jsr     _show_screen
;
; game_loop();
;
	jsr     _game_loop
;
; if(game_clear) ++game_level; else --game_lives;
;
	lda     _game_clear
	beq     L000B
	inc     _game_level
	jmp     L000C
L000B:	dec     _game_lives
;
; while(game_lives&&game_level<LEVELS_ALL)//loop for gameplay
;
L000C:	lda     _game_lives
	beq     L000F
	lda     _game_level
	cmp     #$05
	bcc     L0010
;
; show_screen(!game_lives?SCREEN_GAMEOVER:SCREEN_WELLDONE);//show game results
;
L000F:	lda     _game_lives
	bne     L0014
	lda     #$05
	jmp     L0015
L0014:	lda     #$06
L0015:	jsr     _show_screen
;
; while(1)//infinite loop, title-gameplay
;
	jmp     L0002

.endproc

